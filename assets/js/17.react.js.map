{"version":3,"sources":["webpack:///./src/js/react-app/components/admin/parts/uploaded_images.js","webpack:///./src/js/react-app/components/admin/trees/tree_edit.js"],"names":["env","process","UPLOADS_PATH","require","UploadedImages","props","state","images","deletedImages","refType","index","onChange","updatedImages","clone","splice","imageDeleted","push","setState","updateImages","item","imgStr","description","name","copyStringToClipboard","ref_type","map","onDeleteClick","bind","onCopyClick","imgName","tag_name","renderImages","Component","EditTree","imagesToDelete","selectedItem","fetchTreeTables","getTree","match","params","treeId","prevProps","treeData","handleInitialize","clearMessages","clearUpdateTree","refs","initImages","formData","id","common_name","other_common_names","slug","specific_epithet","other_species","subspecies","variety","cultivar","body","genus_id","trees_category_id","zone_id","reproduction_type_id","height_min","height_max","width_min","width_max","growth_rate","lifespan_min","lifespan_max","formatToMultiselect","origins","eco_benefits","native_to","shapes","light","soil","natural_habitat","common_uses","transplanting","unique_attractions","tolerances","insects","diseases","initialize","formProps","formpropsClone","formatOutFormFields","updateTree","createImgFormData","change","inArray","value","label","treeUpdated","delImages","Object","keys","forEach","key","toString","JSON","stringify","handleSubmit","handleFormSubmit","onInputChange","treeTables","renderHiddenField","tags","renderUpdated","validate","errors","mapStateToProps","ownProps","selector","formValueSelector","tree","treeSingle","all","RequireAuth","reduxForm","form","fields","connect"],"mappings":"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","file":"17.react.js","sourcesContent":["import React, { Component } from 'react';\nimport clone from 'lodash/clone';\nimport { imgName, copyStringToClipboard } from '../../../lib/stringUtils'\n//config\nconst env = process.env.NODE_ENV || \"development\";\nvar { UPLOADS_PATH } = require('../../../config')[env];\n\nclass UploadedImages extends Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.state = {\n\t\t\timages: [],\n\t\t\tdeletedImages: []\n\t\t}\n\t\tthis.refType = '';\n\t}\n\n\tonDeleteClick(index) {\n\t\t//callback updated\n\t\tthis.props.onChange();\n\t\t//remove image at index\n\t\tlet updatedImages = clone(this.state.images);\n\t\tupdatedImages.splice(index, 1);\n\n\t\tlet deletedImages = clone(this.state.deletedImages);\n\t\tlet imageDeleted = clone(this.state.images[index]);\n\t\tdeletedImages.push(imageDeleted);\n\n\t\t//update local state\n\t\tthis.setState({ images: updatedImages });\n\t\tthis.setState({ deletedImages });\n\n\t\t//update parent\n\t\tthis.props.updateImages(updatedImages, deletedImages);\n\t}\n\n\tonCopyClick(item) {\n\t\tlet imgStr = '<img alt=\"' + item.description + '\" src=\"/uploads/' + this.refType + '/' + item.name + '\" />';\n\t\tcopyStringToClipboard(imgStr);\n\t}\n\n\tinitImages(images, ref_type) {\n\t\tthis.refType = ref_type;\n\t\tthis.setState({ images: images }, () => {\n\t\t\t//sent initial state back to parent to avoid it \n\t\t\t//being empty if one doesn't delete\n\t\t\tthis.props.updateImages(images, []);\n\t\t});\n\t}\n\n\trenderImages() {\n\t\treturn (\n\t\t\t<div className=\"drop-preview-wrapper\">\n\t\t\t\t{this.state.images.map((item, index) => {\n\t\t\t\t\treturn (\n\t\t\t\t\t\t<div key={index} className=\"drop-preview\">\n\t\t\t\t\t\t\t<a href=\"#\" className=\"close-btn\" onClick={this.onDeleteClick.bind(this, index)}></a>\n\t\t\t\t\t\t\t<button className=\"copy-btn\" onClick={this.onCopyClick.bind(this, item)}>copy</button>\n\t\t\t\t\t\t\t<img className=\"drop-img-preview\" src={'/uploads/' + this.refType + '/' + imgName(item.name, 'small')} />\n\t\t\t\t\t\t\t<div className=\"desc\">\n\t\t\t\t\t\t\t  {item.name}\n\t\t\t\t\t\t\t  <br/>\n\t\t\t\t\t\t\t  {item.tag_name && 'tag: ' + item.tag_name}\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\n\t\t\t\t\t\t)\n\t\t\t\t})}\n\t\t\t</div>\n\t\t)\n\t}\n\n\trender() {\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t{this.renderImages()}\n\t\t\t</div>\n\t\t)\n\t}\n}\n\nexport default UploadedImages;\n\n\n","import React, { Component } from 'react';\nimport { reduxForm, Field, change, formValueSelector } from 'redux-form';\nimport { getTree, clearUpdateTree, updateTree } from '../../../actions/trees';\nimport { fetchTreeTables } from '../../../actions/treeTables';\nimport Sidebar from '../sidebar';\nimport { connect } from 'react-redux';\nimport renderHiddenField from '../parts/field_hidden';\nimport UploadedImages from '../parts/uploaded_images';\nimport ImgFieldCrop from '../parts/image_field_crop';\nimport { createImgFormData, formatOutFormFields } from '../../../lib/form_utils';\nimport RequireAuth from '../auth/require_auth';\nimport clone from 'lodash/clone';\nimport TreeFields from './tree_fields';\n\n\n\nclass EditTree extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            images: [],\n            imagesToDelete: [],\n            selectedItem: ''\n        }\n    }\n\n    componentWillMount() {\n        this.props.fetchTreeTables();\n        //get initial data to populate the form\n        this.props.getTree(this.props.match.params.treeId);\n    }\n\n    componentDidUpdate(prevProps) {\n        if (this.props.treeData && (prevProps.treeData !== this.props.treeData)) {\n            this.handleInitialize();\n        }\n    }\n\n    componentWillUnmount() {\n      //clear messages when navigating away\n      this.clearMessages();\n    }\n\n    clearMessages() {\n      this.props.clearUpdateTree();\n    }\n\n    handleInitialize() {\n        let images = clone(this.props.treeData.images);\n\n        //store initial images for comparison later\n        this.setState({ images });\n        //init images on UploadedImages component\n        this.refs.UploadedImages.initImages(images, 'trees');\n\n        // set tree values for the fields\n        const formData = {\n            //still must keep this for the id eventhough it isn't rendered\n            'tree_id': this.props.treeData.id,\n            'common_name': this.props.treeData.common_name,\n            'other_common_names': this.props.treeData.other_common_names,\n            'slug': this.props.treeData.slug,\n            'specific_epithet': this.props.treeData.specific_epithet,\n            'other_species': this.props.treeData.other_species,\n            'subspecies': this.props.treeData.subspecies,\n            'variety': this.props.treeData.variety,\n            'cultivar': this.props.treeData.cultivar,\n            'body': this.props.treeData.body,\n            'genus_id': this.props.treeData.genus_id,\n            'trees_category_id': this.props.treeData.trees_category_id,\n            'zone_id': this.props.treeData.zone_id,\n            'reproduction_type_id': this.props.treeData.reproduction_type_id,\n            'height_min': this.props.treeData.height_min,\n            'height_max': this.props.treeData.height_max,\n            'width_min': this.props.treeData.width_min,\n            'width_max': this.props.treeData.width_max,\n            'growth_rate': this.props.treeData.growth_rate,\n            'lifespan_min': this.props.treeData.lifespan_min,\n            'lifespan_max': this.props.treeData.lifespan_max,\n            //multiselects\n            'origins': this.formatToMultiselect(this.props.treeData.origins),\n            'eco_benefits': this.formatToMultiselect(this.props.treeData.eco_benefits),\n            'native_to': this.formatToMultiselect(this.props.treeData.native_to),\n            'shapes': this.formatToMultiselect(this.props.treeData.shapes),\n            'light': this.formatToMultiselect(this.props.treeData.light),\n            'soil': this.formatToMultiselect(this.props.treeData.soil),\n            'natural_habitat': this.formatToMultiselect(this.props.treeData.natural_habitat),\n            'common_uses': this.formatToMultiselect(this.props.treeData.common_uses),\n            'transplanting': this.formatToMultiselect(this.props.treeData.transplanting),\n            'unique_attractions': this.formatToMultiselect(this.props.treeData.unique_attractions),\n            'tolerances': this.formatToMultiselect(this.props.treeData.tolerances),\n            'insects': this.formatToMultiselect(this.props.treeData.insects),\n            'diseases': this.formatToMultiselect(this.props.treeData.diseases),\n        };\n\n        this.props.initialize(formData);\n    }\n\n    // if form isn't valid redux form will not call this function\n    handleFormSubmit(formProps) {\n        let formpropsClone = [];\n        formpropsClone = formatOutFormFields(formProps, [\n                'origins', \n                'eco_benefits',\n                'native_to',\n                'shapes', \n                'light', \n                'soil', \n                'natural_habitat', \n                'common_uses', \n                'transplanting', \n                'unique_attractions', \n                'tolerances',\n                'insects',\n                'diseases',\n            ]);\n\n        // call action to submit edited\n        this.props.updateTree(createImgFormData('new_images', formpropsClone));\n        //clear deleted images\n        this.props.change('deleted_images', '');\n    }\n\n    formatToMultiselect(inArray) {\n        return inArray.map((item) => {\n            return { value: item.id, label: item.name }\n        });\n    }\n\n    renderUpdated() {\n        if(this.props.treeUpdated) {\n            return (\n                <div className=\"submission-message\">\n                    <span>Tree: {this.props.treeUpdated.common_name}<br/>successfully updated.</span>\n                </div>\n            )\n        }\n    }\n\n    updatedImages(images, deletedImages) {\n        let delImages = [];\n        Object.keys(deletedImages).forEach((key) => {\n            delImages[key] = deletedImages[key].name;\n        })\n        this.props.change('deleted_images', delImages.toString());\n\n        // update updated_images field with the upated images in string form\n        this.props.change('images', JSON.stringify(images));\n    }\n\n    onInputChange() {\n        this.clearMessages();\n    }\n    \n    render() {\n        const { handleSubmit } = this.props;\n        return (\n            <div className=\"admin-main\">\n                <div className=\"row\">\n                    <Sidebar/>\n                    <div className=\"main-window columns small-12 large-9\">\n                        <h3>Edit Plant</h3>\n\n                        <form onSubmit={handleSubmit(this.handleFormSubmit.bind(this))}>\n                            <TreeFields\n                                treeId={this.props.treeData.id}\n                                onInputChange={this.onInputChange.bind(this)}\n                                treeTables={this.props.treeTables}\n                            />\n\n                            <UploadedImages\n                                ref=\"UploadedImages\"\n                                updateImages={this.updatedImages.bind(this)}\n                                onChange={this.onInputChange.bind(this)}\n                            />\n                            <Field\n                                name=\"deleted_images\"\n                                component={renderHiddenField}\n                            />\n                            <Field\n                                name=\"images\"\n                                component={renderHiddenField}\n                            />\n                            <ImgFieldCrop\n                                name=\"new_images\"\n                                label=\"New Images\"\n                                classNameLabel=\"file-input-label\"\n                                onChange={this.onInputChange.bind(this)}\n                                tags={this.props.treeTables.tags}\n                            />\n                            <button action=\"submit\" className=\"btn btn-primary\">Submit</button>\n                        </form>\n                        {this.renderUpdated()}\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\n\n\nfunction validate(formProps) {\n    const errors = {};\n\n    //todo: use the map or foreach to shorten this code\n    if (!formProps.common_name) {\n        errors.common_name = 'Please enter a common name';\n    }\n\n    if (!formProps.slug) {\n        errors.slug = 'Please enter a slug';\n    }\n\n    // if (!formProps.trees_category_id) {\n    //   errors.trees_category_id = 'Please enter a category';\n    // }\n\n    // if (formProps.origins) {\n    //     if (formProps.origins.length === 0) {\n    //         errors.origins = 'Please enter at least one origin';\n    //     }\n    // }\n    \n    return errors;\n}\n\nfunction mapStateToProps(state, ownProps) {\n    const selector = formValueSelector('tree-add');\n    return {\n        treeUpdated: state.tree.treeUpdated,\n        treeData: state.tree.treeSingle,\n        treeTables: state.treeTables.all,\n    };\n}\n\nexport default RequireAuth(reduxForm({\n    validate,\n    form: 'tree-add',\n    fields: ['common_name', 'slug', 'body'],\n})(\n    connect(mapStateToProps, { getTree, clearUpdateTree, updateTree, fetchTreeTables })(EditTree)\n    ));\n\n\n\n"],"sourceRoot":""}