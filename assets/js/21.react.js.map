{"version":3,"sources":["webpack:///./src/js/react-app/components/admin/trees/tree_add.js"],"names":["AddTree","props","state","recentValue","fetchTreeTables","nextProps","location","reset","clearMessages","prevProps","treeAdded","addTreeError","clearTree","formProps","formpropsClone","formatOutFormFields","addTree","createImgFormData","errorMessage","common_name","customError","handleSubmit","handleFormSubmit","bind","onInputChange","treeTables","tags","renderAdded","renderError","Component","validate","errors","name","slug","mapStateToProps","tree","all","RequireAuth","reduxForm","form","fields","connect"],"mappings":"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","file":"21.react.js","sourcesContent":["import React, { Component } from 'react';\nimport { reduxForm, reset } from 'redux-form';\nimport { connect } from 'react-redux';\nimport { addTree, addTreeError, clearTree } from '../../../actions/trees';\nimport { fetchTreeTables } from '../../../actions/treeTables';\nimport Sidebar from '../sidebar';\nimport ImgFieldCrop from '../parts/image_field_crop';\nimport { createImgFormData, formatOutFormFields } from '../../../lib/form_utils';\nimport RequireAuth from '../auth/require_auth';\nimport TreeFields from './tree_fields';\n\nclass AddTree extends Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      // store the most recent value \n      // since theme turns to undefined after first form submit\n      recentValue: ''\n    }\n  }\n\n  componentWillMount() {\n    this.props.fetchTreeTables();\n  }\n\n  componentWillReceiveProps(nextProps) {\n    // if newly navigated from the router link...\n    if(nextProps.location !== this.props.location) {\n      //clear the form fields\n      this.props.reset('tree-add');\n      //clear messages\n      this.clearMessages();\n    }\n  }\n\n  componentDidUpdate(prevProps) {\n    //clear out error messsages if any\n    if (this.props.treeAdded && (prevProps.treeAdded !== this.props.treeAdded)) {\n      this.props.addTreeError('');\n    }\n  }\n\n  componentWillUnmount() {\n    //clear messages when navigating away\n    this.clearMessages();\n  }\n\n  clearMessages() {\n    this.props.clearTree();\n    this.props.addTreeError('');\n  }\n\n  // if form isn't valit redux form will not call this function\n  handleFormSubmit(formProps) {\n    let formpropsClone = [];\n    formpropsClone = formatOutFormFields(formProps, [\n                'origins', \n                'eco_benefits', \n                'native_to',\n                'shapes', \n                'light', \n                'soil', \n                'natural_habitat', \n                'common_uses', \n                'transplanting', \n                'unique_attractions', \n                'tolerances',\n                'insects',\n                'diseases',\n            ]);\n\n    // call action to submit edited\n    this.props.addTree(createImgFormData('images', formpropsClone));\n  }\n\n  renderAdded() {\n    //only render if there's no error message\n    if(this.props.treeAdded && !this.props.errorMessage) {\n      return (\n        <div className=\"submission-message\">\n          <span>Tree: {this.props.treeAdded.common_name}<br/>successfully added. </span>\n        </div>\n        )\n    }\n  }\n\n  renderError() {\n    if (this.props.errorMessage) {\n      return (\n        <div className=\"alert alert-danger\">\n          <strong>Oops!</strong> {this.props.errorMessage}\n        </div>\n        );\n    }\n    if (this.customError) {\n      return (\n        <div className=\"alert alert-danger\">\n          <strong>Oops!</strong> {this.customError}\n        </div>\n        );\n    }\n  }\n\n  onInputChange() {\n      this.clearMessages();\n  }\n    \n  render() {\n      const { handleSubmit } = this.props;\n      return (\n        <div className=\"admin-main\">\n          <div className=\"row\">\n            <Sidebar/>\n            <div className=\"main-window columns small-12 large-9\">\n              <h3>Add Plant</h3>\n              <form  onSubmit={handleSubmit(this.handleFormSubmit.bind(this))}>\n                <TreeFields\n                    onInputChange={this.onInputChange.bind(this)}\n                    treeTables={this.props.treeTables}\n                />\n\n                <ImgFieldCrop\n                  name=\"images\"\n                  classNameLabel=\"file-input-label\"\n                  onChange={this.onInputChange.bind(this)}\n                  tags={this.props.treeTables.tags}\n                />\n                <button action=\"submit\" className=\"btn btn-primary\">Submit</button>\n              </form>\n              {this.renderAdded()}\n              {this.renderError()}\n            </div>\n          </div>\n        </div>\n      );\n  }\n\n}\n\n\nfunction validate(formProps) {\n  let errors = {};\n\n  //todo: use the map or foreach to shorten this code\n  if (!formProps.name) {\n    errors.name = 'Please enter a name';\n  }\n\n  if (!formProps.slug) {\n    errors.slug = 'Please enter a slug';\n  }\n\n  // if (!formProps.genus_id) {\n  //   errors.genus_id = 'Please enter a genus';\n  // }\n\n  // if (!formProps.specific_epithet) {\n  //   errors.specific_epithet = 'Please enter a specific epithet';\n  // }\n\n  // if (!formProps.trees_category_id) {\n  //   errors.trees_category_id = 'Please enter a tree category';\n  // }\n\n  // if (!formProps.origins) {\n  //    errors.origins = 'Please enter at least one origin';\n  // }\n  \n  return errors;\n}\n\nfunction mapStateToProps(state) {\n  return { \n    treeAdded: state.tree.treeAdded,\n    errorMessage: state.tree.addTreeError,\n    treeTables: state.treeTables.all,\n  };\n}\n\n\nexport default RequireAuth(reduxForm({\n  validate,\n  form: 'tree-add',\n  fields: ['name', 'slug', 'files'],\n})(\nconnect(mapStateToProps, { addTree, clearTree, addTreeError, fetchTreeTables, reset })(AddTree)\n));\n\n\n\n"],"sourceRoot":""}